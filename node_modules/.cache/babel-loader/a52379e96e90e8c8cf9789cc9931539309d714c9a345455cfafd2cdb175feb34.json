{"ast":null,"code":"var _jsxFileName = \"/Users/kanishk/Desktop/aggrid/src/CustomStatusBar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './CustomStatusBar.css'; // Ensure you have a corresponding CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomStatusBar = ({\n  gridApi\n}) => {\n  _s();\n  const [newPresetName, setNewPresetName] = useState('');\n  const [filterPresets, setFilterPresets] = useState(JSON.parse(localStorage.getItem('filterPresets')) || {});\n  useEffect(() => {\n    localStorage.setItem('filterPresets', JSON.stringify(filterPresets));\n  }, [filterPresets]);\n  const resetFilters = () => {\n    if (gridApi) {\n      gridApi.setFilterModel({});\n      localStorage.removeItem('gridFilters');\n    }\n  };\n  const saveFilterPreset = () => {\n    if (gridApi && newPresetName) {\n      const currentFilters = gridApi.getFilterModel();\n      setFilterPresets({\n        ...filterPresets,\n        [newPresetName]: currentFilters\n      });\n      setNewPresetName('');\n    }\n  };\n  const applyFilterPreset = presetName => {\n    if (gridApi && presetName in filterPresets) {\n      gridApi.setFilterModel(filterPresets[presetName]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"status-bar\",\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      className: \"status-bar-select\",\n      onChange: e => applyFilterPreset(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"Select a filter preset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), Object.keys(filterPresets).map(presetName => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: presetName,\n        children: presetName\n      }, presetName, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"status-bar-input\",\n      value: newPresetName,\n      onChange: e => setNewPresetName(e.target.value),\n      placeholder: \"New preset name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"status-bar-button\",\n      onClick: saveFilterPreset,\n      children: \"Save current filters as preset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"status-bar-button\",\n      onClick: resetFilters,\n      children: \"Reset Filters\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n_s(CustomStatusBar, \"Id0/nVaIx6XalmNj5QNtFeTMR+c=\");\n_c = CustomStatusBar;\nexport default CustomStatusBar;\nvar _c;\n$RefreshReg$(_c, \"CustomStatusBar\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","CustomStatusBar","gridApi","_s","newPresetName","setNewPresetName","filterPresets","setFilterPresets","JSON","parse","localStorage","getItem","setItem","stringify","resetFilters","setFilterModel","removeItem","saveFilterPreset","currentFilters","getFilterModel","applyFilterPreset","presetName","className","children","onChange","e","target","value","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","map","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/kanishk/Desktop/aggrid/src/CustomStatusBar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './CustomStatusBar.css'; // Ensure you have a corresponding CSS file\n\nconst CustomStatusBar = ({ gridApi }) => {\n    const [newPresetName, setNewPresetName] = useState('');\n    const [filterPresets, setFilterPresets] = useState(JSON.parse(localStorage.getItem('filterPresets')) || {});\n\n    useEffect(() => {\n        localStorage.setItem('filterPresets', JSON.stringify(filterPresets));\n    }, [filterPresets]);\n\n    const resetFilters = () => {\n        if (gridApi) {\n            gridApi.setFilterModel({});\n            localStorage.removeItem('gridFilters');\n        }\n    };\n\n    const saveFilterPreset = () => {\n        if (gridApi && newPresetName) {\n            const currentFilters = gridApi.getFilterModel();\n            setFilterPresets({ ...filterPresets, [newPresetName]: currentFilters });\n            setNewPresetName('');\n        }\n    };\n\n    const applyFilterPreset = (presetName) => {\n        if (gridApi && presetName in filterPresets) {\n            gridApi.setFilterModel(filterPresets[presetName]);\n        }\n    };\n\n    return (\n        <div className=\"status-bar\">\n            <select className=\"status-bar-select\" onChange={e => applyFilterPreset(e.target.value)}>\n                <option>Select a filter preset</option>\n                {Object.keys(filterPresets).map(presetName => (\n                    <option key={presetName} value={presetName}>{presetName}</option>\n                ))}\n            </select>\n            <input \n                className=\"status-bar-input\"\n                value={newPresetName} \n                onChange={e => setNewPresetName(e.target.value)} \n                placeholder=\"New preset name\" \n            />\n            <button className=\"status-bar-button\" onClick={saveFilterPreset}>Save current filters as preset</button>\n            <button className=\"status-bar-button\" onClick={resetFilters}>Reset Filters</button>\n        </div>\n    );\n};\n\nexport default CustomStatusBar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}