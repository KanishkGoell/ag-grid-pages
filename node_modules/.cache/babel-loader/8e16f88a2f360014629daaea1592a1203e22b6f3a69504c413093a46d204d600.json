{"ast":null,"code":"import React,{useState,useEffect}from'react';import{AgGridReact}from'ag-grid-react';import{LicenseManager}from'ag-grid-enterprise';import'ag-grid-community/styles/ag-grid.css';import'ag-grid-community/styles/ag-theme-alpine.css';import'ag-grid-enterprise';import CustomStatusBar from'./CustomStatusBar';import moment from'moment';import{jsx as _jsx}from\"react/jsx-runtime\";LicenseManager.setLicenseKey('YOUR_TRIAL_LICENSE_KEY');// Replace with your trial license key\nconst MyAgGrid=()=>{const[rowData,setRowData]=useState([]);const[gridApi,setGridApi]=useState(null);const[filterPresets,setFilterPresets]=useState({});const dateComparator=(filterLocalDateAtMidnight,cellValue)=>{const cellDate=moment(cellValue,'MM/DD/YYYY').toDate();if(cellDate<filterLocalDateAtMidnight){return-1;}else if(cellDate>filterLocalDateAtMidnight){return 1;}return 0;};// Function to safely parse numbers, removing $ and commas for salary\nconst parseSalary=value=>{const cleanedValue=value.replace(/[$,]/g,'');// Remove $ and ,\nconst number=parseFloat(cleanedValue);return isNaN(number)?0:number;// Replace 0 with any default value you prefer\n};// Function to safely parse percentages, removing % symbol\nconst parseBonus=value=>{const cleanedValue=value.replace(/[%]/g,'');// Remove %\nconst number=parseFloat(cleanedValue);return isNaN(number)?0:number;// Replace 0 with any default value you prefer\n};// Column definitions\nconst columnDefs=[{field:'Employee ID',filter:'agTextColumnFilter',sortable:false},{field:'Full Name',filter:'agTextColumnFilter',sortable:false},{field:'Job Title',filter:'agTextColumnFilter',sortable:false},{field:'Department',filter:'agTextColumnFilter',sortable:false},{field:'Business Unit',filter:'agTextColumnFilter',sortable:false},{field:'Gender',filter:'agTextColumnFilter',sortable:false},{field:'Ethnicity',filter:'agTextColumnFilter',sortable:false},{field:'Age',filter:'agNumberColumnFilter',sortable:true},{field:'Annual Salary',filter:'agNumberColumnFilter',sortable:true},{field:'Bonus %',filter:'agNumberColumnFilter',sortable:true},{field:'Country',filter:'agTextColumnFilter',sortable:false},{field:'City',filter:'agTextColumnFilter',sortable:false},{field:'Hire Date',filter:'agDateColumnFilter',sortable:true,filterParams:{comparator:dateComparator},valueGetter:params=>moment(params.data['Hire Date'],'MM/DD/YYYY').toDate(),valueFormatter:params=>moment(params.value).format('MM/DD/YYYY')},{field:'Exit Date',filter:'agDateColumnFilter',sortable:true,filterParams:{comparator:dateComparator},valueGetter:params=>moment(params.data['Exit Date'],'MM/DD/YYYY').toDate(),valueFormatter:params=>moment(params.value).format('MM/DD/YYYY')}];// Fetching data and parsing numbers\nuseEffect(()=>{fetch('/data.json').then(response=>response.json()).then(data=>{const typedData=data.map(item=>({...item,Age:parseFloat(item.Age),'Annual Salary':parseSalary(item['Annual Salary']),'Bonus %':parseBonus(item['Bonus %']),// Convert the Date object back to a string in the format 'MM/DD/YYYY'\n'Hire Date':new Date(item['Hire Date']).toLocaleDateString('en-US'),'Exit Date':new Date(item['Exit Date']).toLocaleDateString('en-US')}));setRowData(typedData);}).catch(error=>console.error('Error loading the data:',error));},[]);// Grid ready event\nconst onGridReady=params=>{setGridApi(params.api);const savedFilters=JSON.parse(localStorage.getItem('gridFilters'));if(savedFilters){params.api.setFilterModel(savedFilters);}};// Filter change event\nconst onFilterChanged=()=>{if(gridApi){const allFilters=gridApi.getFilterModel();localStorage.setItem('gridFilters',JSON.stringify(allFilters));}};// Reset filters\nconst resetFilters=()=>{if(gridApi){gridApi.setFilterModel({});localStorage.removeItem('gridFilters');}};return/*#__PURE__*/_jsx(\"div\",{className:\"ag-theme-alpine\",style:{height:600,width:'100%'},children:/*#__PURE__*/_jsx(AgGridReact,{rowData:rowData,columnDefs:columnDefs,defaultColDef:{resizable:true,sortable:true,filter:true},animateRows:true,pagination:true,paginationPageSize:20,onGridReady:onGridReady,onFilterChanged:onFilterChanged,sideBar:{toolPanels:['columns','filters'],defaultToolPanel:'filters'}})});};export default MyAgGrid;","map":{"version":3,"names":["React","useState","useEffect","AgGridReact","LicenseManager","CustomStatusBar","moment","jsx","_jsx","setLicenseKey","MyAgGrid","rowData","setRowData","gridApi","setGridApi","filterPresets","setFilterPresets","dateComparator","filterLocalDateAtMidnight","cellValue","cellDate","toDate","parseSalary","value","cleanedValue","replace","number","parseFloat","isNaN","parseBonus","columnDefs","field","filter","sortable","filterParams","comparator","valueGetter","params","data","valueFormatter","format","fetch","then","response","json","typedData","map","item","Age","Date","toLocaleDateString","catch","error","console","onGridReady","api","savedFilters","JSON","parse","localStorage","getItem","setFilterModel","onFilterChanged","allFilters","getFilterModel","setItem","stringify","resetFilters","removeItem","className","style","height","width","children","defaultColDef","resizable","animateRows","pagination","paginationPageSize","sideBar","toolPanels","defaultToolPanel"],"sources":["/Users/kanishk/Desktop/aggrid/src/MyAgGrid.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { AgGridReact } from 'ag-grid-react';\nimport { LicenseManager } from 'ag-grid-enterprise';\nimport 'ag-grid-community/styles/ag-grid.css';\nimport 'ag-grid-community/styles/ag-theme-alpine.css';\nimport 'ag-grid-enterprise';\nimport CustomStatusBar from './CustomStatusBar';\nimport moment from 'moment';\n\nLicenseManager.setLicenseKey('YOUR_TRIAL_LICENSE_KEY'); // Replace with your trial license key\n\nconst MyAgGrid = () => {\n    const [rowData, setRowData] = useState([]);\n    const [gridApi, setGridApi] = useState(null);\n    const [filterPresets, setFilterPresets] = useState({});\n\n\n\nconst dateComparator = (filterLocalDateAtMidnight, cellValue) => {\n    const cellDate = moment(cellValue, 'MM/DD/YYYY').toDate();\n    if (cellDate < filterLocalDateAtMidnight) {\n        return -1;\n    } else if (cellDate > filterLocalDateAtMidnight) {\n        return 1;\n    }\n    return 0;\n};\n    // Function to safely parse numbers, removing $ and commas for salary\n    const parseSalary = value => {\n        const cleanedValue = value.replace(/[$,]/g, ''); // Remove $ and ,\n        const number = parseFloat(cleanedValue);\n        return isNaN(number) ? 0 : number; // Replace 0 with any default value you prefer\n    };\n\n    // Function to safely parse percentages, removing % symbol\n    const parseBonus = value => {\n        const cleanedValue = value.replace(/[%]/g, ''); // Remove %\n        const number = parseFloat(cleanedValue);\n        return isNaN(number) ? 0 : number; // Replace 0 with any default value you prefer\n    };\n\n    // Column definitions\n    const columnDefs = [\n        { field: 'Employee ID', filter: 'agTextColumnFilter', sortable: false },\n        { field: 'Full Name', filter: 'agTextColumnFilter', sortable: false },\n        { field: 'Job Title', filter: 'agTextColumnFilter', sortable: false },\n        { field: 'Department', filter: 'agTextColumnFilter', sortable: false },\n        { field: 'Business Unit', filter: 'agTextColumnFilter', sortable: false },\n        { field: 'Gender', filter: 'agTextColumnFilter', sortable: false },\n        { field: 'Ethnicity', filter: 'agTextColumnFilter', sortable: false },\n        { field: 'Age', filter: 'agNumberColumnFilter', sortable: true },\n        { field: 'Annual Salary', filter: 'agNumberColumnFilter', sortable: true },\n        { field: 'Bonus %', filter: 'agNumberColumnFilter', sortable: true },\n        { field: 'Country', filter: 'agTextColumnFilter', sortable: false },\n        { field: 'City', filter: 'agTextColumnFilter', sortable: false },\n        { \n            field: 'Hire Date', \n            filter: 'agDateColumnFilter', \n            sortable: true, \n            filterParams: { comparator: dateComparator },\n            valueGetter: params => moment(params.data['Hire Date'], 'MM/DD/YYYY').toDate(),\n            valueFormatter: params => moment(params.value).format('MM/DD/YYYY')\n            \n        },\n        { \n            field: 'Exit Date', \n            filter: 'agDateColumnFilter', \n            sortable: true, \n            filterParams: { comparator: dateComparator },\n            valueGetter: params => moment(params.data['Exit Date'], 'MM/DD/YYYY').toDate(),\n            valueFormatter: params => moment(params.value).format('MM/DD/YYYY')\n        }\n    ];\n\n// Fetching data and parsing numbers\nuseEffect(() => {\n    fetch('/data.json')\n        .then(response => response.json())\n        .then(data => {\n            const typedData = data.map(item => ({\n                ...item,\n                Age: parseFloat(item.Age),\n                'Annual Salary': parseSalary(item['Annual Salary']),\n                'Bonus %': parseBonus(item['Bonus %']),\n                // Convert the Date object back to a string in the format 'MM/DD/YYYY'\n                'Hire Date': new Date(item['Hire Date']).toLocaleDateString('en-US'),\n                'Exit Date': new Date(item['Exit Date']).toLocaleDateString('en-US'),\n            }));\n            setRowData(typedData);\n        })\n        .catch(error => console.error('Error loading the data:', error));\n}, []);\n\n    // Grid ready event\n    const onGridReady = params => {\n        setGridApi(params.api);\n        const savedFilters = JSON.parse(localStorage.getItem('gridFilters'));\n        if (savedFilters) {\n            params.api.setFilterModel(savedFilters);\n        }\n    };\n\n    // Filter change event\n    const onFilterChanged = () => {\n        if (gridApi) {\n            const allFilters = gridApi.getFilterModel();\n            localStorage.setItem('gridFilters', JSON.stringify(allFilters));\n        }\n    };\n\n    // Reset filters\n    const resetFilters = () => {\n        if (gridApi) {\n            gridApi.setFilterModel({});\n            localStorage.removeItem('gridFilters');\n        }\n    };\n\n    return (\n        <div className=\"ag-theme-alpine\" style={{ height: 600, width: '100%' }}>\n        {/* <CustomStatusBar gridApi={gridApi} setFilterPresets={setFilterPresets} filterPresets={filterPresets} /> */}\n            <AgGridReact\n                rowData={rowData}\n                columnDefs={columnDefs}\n                defaultColDef={{ resizable: true, sortable: true, filter: true }}\n                animateRows={true}\n                pagination={true}\n                paginationPageSize={20}\n                onGridReady={onGridReady}\n                onFilterChanged={onFilterChanged}\n                sideBar={{ toolPanels: ['columns', 'filters'], defaultToolPanel: 'filters' }}\n            />\n        </div>\n    );\n};\n\nexport default MyAgGrid;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}